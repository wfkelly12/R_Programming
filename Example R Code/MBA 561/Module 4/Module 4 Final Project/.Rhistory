mutate(
'Date' = ymd_hms(Date) #ymd_hms
, daily = round_date(Date, 'day')
) %>%
group_by(daily) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df_daily <- df %>%
mutate(
'Date' = mdy(Date)
, daily = round_date(Date, 'day')
) %>%
group_by(daily) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df_daily <- df %>%
mutate(
Date = mdy(Date)
, daily = round_date(Date, 'day')
) %>%
group_by(daily) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df_daily <- df %>%
mutate(
Date = mdy(Date)
, daily = round_date(Date, 'day')
) %>%
group_by(daily) %>%
summarise(Quantity = mean(Quantity)
, TotalDue = mean(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df_daily <- df %>%
mutate(
Date = mdy(Date)
, daily = round_date(Date, 'day')
) %>%
group_by(daily) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
View(df_weather_weekly)
df_w_w_Long <- df_weather_weekly %>%
pivot_longer(cols = Monday:Sunday
, names_to = 'day'
, values_to = 'max_temp')
View(df_w_w_Long)
df_weather_daily <- df_weather_weekly %>%
pivot_longer(cols = Monday:Sunday
, names_to = 'day'
, values_to = 'max_temp')
View(df_weather_daily)
View(df_weather_daily)
View(df_daily)
df_weather_daily %<>%
mutate(
Date = mdy(WeekStarting)
)
df_weather_daily <- df_weather_weekly %>%
mutate(
Date = mdy(WeekStarting))  %>%
pivot_longer(cols = Monday:Sunday
, names_to = 'day'
, values_to = 'max_temp')
df_weather_daily <- df_weather_weekly %>%
pivot_longer(cols = Monday:Sunday
, names_to = 'day'
, values_to = 'max_temp')
View(df_weather_daily)
df_weather_daily %<>%
mutate(
Date = mdy(WeekStarting))
df_weather_daily %<>%
mutate(
Date = mdy(WeekStarting))
daily_join <- df_daily %>%
left_join(df_weather_daily, by = 'Date')
df_weather_daily %<>%
mutate(
Date = mdy(WeekStarting))
daily_join <- df_daily %>%
left_join(df_weather_daily, by = 'date')
View(df_daily)
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(daily) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
View(df_daily)
df_weather_daily %<>%
mutate(
Date = mdy(WeekStarting))
daily_join <- df_daily %>%
left_join(df_weather_daily, by = 'Date')
View(daily_join)
View(df_weather_daily)
View(daily_join)
daily_join <- df_daily %>%
inner_join(df_weather_daily, by = 'Date')
View(daily_join)
View(daily_join)
View(daily_join)
View(df_weather_daily)
View(df_daily)
View(df_weather_daily)
View(df_weather_daily)
View(df_daily)
View(df_weather_daily)
View(df_weather_daily)
daily_join <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(date))
df_weather_daily %<>%     # Convert WeekStarting col to Date to create primary key
mutate(Date = mdy(WeekStarting))
daily_join <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(date))
daily_join <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
View(daily_join)
View(df_daily)
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date)
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
View(df_final)
#Pair Plot of Quantity, TotalDue, and Max_Temp from df_final
plot(df_final[,c('Quantity', 'TotalDue', 'MaxTemp')], cex = .1)
#Pair Plot of Quantity, TotalDue, and max_temp from df_final
plot(df_final[,c('Quantity', 'TotalDue', 'max_temp')], cex = .1)
df_weather_daily$day <- as.factor(df_weather_daily$day) %>%
as.numeric()
View(df_weather_daily)
df_weather_daily$day <- as.factor(df_weather_daily$day) %>%
as.numeric() %>%
arrange(desc(df_weather_daily$day))
df_weather_daily %<>%     # Convert WeekStarting col to Date to create primary key
mutate(Date = mdy(WeekStarting))
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
df_weather_daily <- df_weather_weekly %>%
pivot_longer(cols = Monday:Sunday
, names_to = 'day'
, values_to = 'max_temp')
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
df_weather_daily %<>%     # Convert WeekStarting col to Date to create primary key
mutate(Date = mdy(WeekStarting))
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
View(df_weather_daily)
library(tidyr) # For lots of data wrangling tasks
library(magrittr) # For piping data into functions
library(lubridate) # For dealing with dates
library(stringr) # String functions
library(forcats) #fct infreq functions
df <- read.csv("ities.csv") # Read ities.csv into data frame
df <- read.csv("ities.csv") # Read ities.csv into data frame
df_weather_weekly <- read.csv("max_temp.csv") # Read max_temp.csv into data frame
View(df_weather_weekly)
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df_weather_daily <- df_weather_weekly %>%
pivot_longer(cols = Monday:Sunday
, names_to = 'day'
, values_to = 'max_temp')
View(df_weather_daily)
View(df_weather_daily)
View(df_daily)
df_weather_daily %<>%     # Convert WeekStarting col to Date to create primary key
mutate(Date = mdy(WeekStarting))
View(df_weather_daily)
df_weather_daily$day <- as_factor(df_weather_daily$day) %>%
as.numeric()
df_weather_daily$Date <- df_weather_daily$day + df_weather_daily$Date - 1
class(df_weather_daily$Date)
class(df_weather_daily$day)
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
View(df_final)
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
#arrange(desc(Date))
#Pair Plot of Quantity, TotalDue, and max_temp from df_final
plot(df_final[,c('Quantity', 'TotalDue', 'max_temp')], cex = .1)
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
#Pair Plot of Quantity, TotalDue, and max_temp from df_final
plot(df_final[,c('Quantity', 'TotalDue', 'max_temp')], cex = .1)
View(df_final)
plot(df_final[,c('Quantity', 'TotalDue', 'max_temp')], cex = .1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr) # For lots of data wrangling tasks
library(magrittr) # For piping data into functions
library(lubridate) # For dealing with dates
library(stringr) # String functions
library(forcats) #fct infreq functions
df <- read.csv("ities.csv") # Read ities.csv into data frame
df_weather_weekly <- read.csv("max_temp.csv") # Read max_temp.csv into data frame
dim(df) # Display Row/Col of df
dim(df_weather_weekly) # Display Row/Col of df_weather_weekly
str(df) # Display structure of df
str(df_weather_weekly) # Display structure of df_weather_weekly
summary(df) # Display summary of df
summary(df_weather_weekly) # Display summary of df_weather_weekly
colSums(is.na(df)) # Display columns with missing values
df %<>% filter(!is.na(Price)) # Remove missing values in Price column
df %<>% filter(!is.na('Price')) # Remove missing values in Price column
knitr::opts_chunk$set(echo = TRUE)
library(tidyr) # For lots of data wrangling tasks
library(magrittr) # For piping data into functions
library(lubridate) # For dealing with dates
library(stringr) # String functions
library(forcats) #fct infreq functions
df <- read.csv("ities.csv") # Read ities.csv into data frame
df_weather_weekly <- read.csv("max_temp.csv") # Read max_temp.csv into data frame
dim(df) # Display Row/Col of df
dim(df_weather_weekly) # Display Row/Col of df_weather_weekly
str(df) # Display structure of df
str(df_weather_weekly) # Display structure of df_weather_weekly
summary(df) # Display summary of df
summary(df_weather_weekly) # Display summary of df_weather_weekly
colSums(is.na(df)) # Display columns with missing values
df %<>% filter(!is.na(df$Price)) # Remove missing values in Price column
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df <- read.csv("ities.csv") # Read ities.csv into data frame
?is.na()
df_Price_TotalDue_NoNa <- df %>%
filter(!is.na(Price)) # Remove missing values in Price column
df_Price_TotalDue_NoNa <- df %>%
filter(!is.na('Price')) # Remove missing values in Price column
summary(df_Price_TotalDue_NoNa)
df_Price_TotalDue_NoNa <- df %>%
filter(!is.na(df$Price)) # Remove missing values in Price column
summary(df_Price_TotalDue_NoNa)
df_Price_TotalDue_NoNa <- df %>%
filter(!is.na(TotalDue)) # Remove missing values in Price column
df_Price_TotalDue_NoNa <- df %>%
filter(!is.na(Price)) # Remove missing values in Price column
df_Price_TotalDue_NoNa <- df %>%
filter(!is.na(TotalDue)) # Remove missing values in Price column
colSums(is.na(df)) # Display columns with missing values
df_2 <- df %>%
filter(!is.na(Price))
df_2 <- df %>%
filter(!is.na(Price))
df_2 <- df %>%
filter(!is.na(.,Price))
View(df)
View(df)
C_O_kabob_sale <- df %>%
filter(LineItem=='Chicken and Onion Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
?summarise
?dplyr
library(dplyr) # Data manipulation
C_O_kabob_sale <- df %>%
filter(LineItem=='Chicken and Onion Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
B_S_kabob_sale <- df %>%
filter(LineItem=='Chicken and Onion Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
B_S_kabob_sale <- df %>%
filter(LineItem=='Beef and Squash Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
View(df)
View(df)
View(df)
View(df)
library(tidyr) # For lots of data wrangling tasks
library(magrittr) # For piping data into functions
library(lubridate) # For dealing with dates
library(stringr) # String functions
library(forcats) #fct infreq functions
library(dplyr) # Data manipulation
df <- read.csv("ities.csv") # Read ities.csv into data frame
df <- read.csv("ities.csv") # Read ities.csv into data frame
df_weather_weekly <- read.csv("max_temp.csv") # Read max_temp.csv into data frame
C_O_kabob_sale <- df %>%
filter(LineItem=='Chicken and Onion Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
B_S_kabob_sale <- df %>%
filter(LineItem=='Beef and Squash Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
View(df)
df %<>% mutate(
Price = case_when(
is.na(Price) & LineItem=='Chicken and Onion Kabob' ~ C_O_kabob_sale[1,1],
is.na(Price) & LineItem=='Beef and Squash Kabob' ~ B_S_kabob_sale[1,1],
T~Price
),
TotalDue = Price*Quantity
)
summary(df)
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
View(df_daily)
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = mean(Quantity)
, TotalDue = mean(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = mean(Quantity)
, TotalDue = mean(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df_weather_daily <- df_weather_weekly %>%
pivot_longer(cols = Monday:Sunday
, names_to = 'day'
, values_to = 'max_temp')
View(df_weather_daily)
View(df_weather_daily)
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = mean(Quantity)
, TotalDue = mean(TotalDue)) %>%
ungroup() %>%
arrange(desc(TotalDue))
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = mean(Quantity)
, TotalDue = mean(TotalDue)) %>%
ungroup()
View(df)
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup()
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = mean(Quantity)
, TotalDue = mean(TotalDue)) %>%
ungroup()
df_weather_daily %<>%     # Convert WeekStarting col to Date to create primary key
mutate(Date = mdy(WeekStarting))
df_weather_daily$day <- as_factor(df_weather_daily$day) %>%
as.numeric()
df_weather_daily$Date <- df_weather_daily$day + df_weather_daily$Date - 1
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
View(df_final)
View(df_final)
View(df_weather_daily)
#Pair Plot of Quantity, TotalDue, and max_temp from df_final
plot(df_final[,c('Quantity', 'TotalDue', 'max_temp')], cex = .1)
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup()
df_weather_daily %<>%     # Convert WeekStarting col to Date to create primary key
mutate(Date = mdy(WeekStarting))
df_weather_daily$day <- as_factor(df_weather_daily$day) %>%
as.numeric()
df_weather_daily$Date <- df_weather_daily$day + df_weather_daily$Date - 1
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
#Pair Plot of Quantity, TotalDue, and max_temp from df_final
plot(df_final[,c('Quantity', 'TotalDue', 'max_temp')], cex = .1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr) # For lots of data wrangling tasks
library(magrittr) # For piping data into functions
library(lubridate) # For dealing with dates
library(stringr) # String functions
library(forcats) #fct infreq functions
library(dplyr) # Data manipulation
df <- read.csv("ities.csv") # Read ities.csv into data frame
df_weather_weekly <- read.csv("max_temp.csv") # Read max_temp.csv into data frame
dim(df) # Display Row/Col of df
dim(df_weather_weekly) # Display Row/Col of df_weather_weekly
str(df) # Display structure of df
str(df_weather_weekly) # Display structure of df_weather_weekly
summary(df) # Display summary of df
summary(df_weather_weekly) # Display summary of df_weather_weekly
colSums(is.na(df)) # Display columns with missing values
# Calculate mean Price of Chicken and Onion Kabob (C_O) and Beef and Squash Kabob (B_S)
# Where Operation Type is Sale in order to fill in missing observations.
C_O_kabob_sale <- df %>%
filter(LineItem=='Chicken and Onion Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
B_S_kabob_sale <- df %>%
filter(LineItem=='Beef and Squash Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
# Replace Line Items with Average Price values calculated above and Calc Total Due
df %<>% mutate(
Price = case_when(
is.na(Price) & LineItem=='Chicken and Onion Kabob' ~ C_O_kabob_sale[1,1]
, is.na(Price) & LineItem=='Beef and Squash Kabob' ~ B_S_kabob_sale[1,1]
, T~Price
),
TotalDue = Price*Quantity
)
summary(df)
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup()
df_weather_daily <- df_weather_weekly %>%
pivot_longer(cols = Monday:Sunday
, names_to = 'day'
, values_to = 'max_temp')
df_weather_daily %<>%     # Convert WeekStarting col to Date to create primary key
mutate(Date = mdy(WeekStarting))
df_weather_daily$day <- as_factor(df_weather_daily$day) %>%
as.numeric()
df_weather_daily$Date <- df_weather_daily$day + df_weather_daily$Date - 1
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
#Pair Plot of Quantity, TotalDue, and max_temp from df_final
plot(df_final[,c('Quantity', 'TotalDue', 'max_temp')], cex = .1)
View(df)
View(df_daily)
View(df_final)
View(df_weather_daily)
View(df_weather_weekly)
View(df_weather_daily)
