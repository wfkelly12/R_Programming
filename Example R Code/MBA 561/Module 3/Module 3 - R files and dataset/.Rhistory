5 + 5
5/10
4+5
(1+5) / (26*45)
clear
cls
5/1
log(10, 10)
5%%2
x <- 5        # Assign x the value of 5
y <- 8        # Assign y the value of 8
x*y           # x multiplied by y will return the same thing as 5 multiplied by 8
z <- x*y      # assign z the result of x multiplied by y
rm(z)         # Removes a variable from memory
rm(x,y)
log(10)
2*4
source('~/.active-rstudio-document')
2+4
2-4
2*4
2+4
2-4
2*4
2^4
x = 4
4*x
x <- 4
x <- 5
x <- 5
2+4
2-4
2*4
2^4
x = 4
4*x
x <- 5
y <- 6
z <- x*y
rm(x)
rm(y,z)
v1 <- c(1,2,3)
v1
length(v1)
max(v1)
min(v1)
length(v1)
length(v1)
v1*4
v1
v2=v1*4
v2
v1
v3=v2/v1
v3=v1/v2
v4 <- c(4,5,6,7)
v4*v1
install.packages("swirl")
library("swirl")
rm(list=ls())
library("swirl")
swirl()
5_+7
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
swirl
swirl()
builtins()
995
?attr
attr(x,"dim") <- c(2,5)
x <- 1:10
attr(x,"dim") <- c(2,5)
x
plot(1:10)
for (x in 1:10){
print(x)
}
for (x in 1:10){
print(x)
}
for (x in 1:10){
print(x+1)
}
for (x in fruits) {
print(x)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
print(x)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
print(x)
}
dice <- c(1,2,3,4,5,6)
for (x in dice){
print(x)
}
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("shiny", "rstudio")
install.packages("shiny")
dir.exists("/Library/Frameworks/R.framework/Versions/3.3/Resources/library/00LOCK-jrosen48-prcr-4f6f783") returns FALSE?
dir.exists("/Library/Frameworks/R.framework/Versions/3.3/Resources/library/00LOCK-jrosen48-prcr-4f6f783") returns FALSE
rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
:$ rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
$ rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
rm /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
dir.exists("/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv")
rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
R CMD INSTALL --no-lock <pkg>
install.packages("Rcpp", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages(xxx, INSTALL_opts = c('--no-lock'))
install.packages(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv), INSTALL_opts = c('--no-lock'))
devtools::install_github("rstudio/httpuv")
install.packages("Shiny", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("shiny", dependencies = TRUE, INSTALL_opts = '--no-lock')
unlink("/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv", recursive = TRUE)
install.packages("httpuv")
install.packages("shiny", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages(c("Rcpp", "httpuv", "shiny"))
dir.exists(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv)
dir.exists(Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv)
dir.exists("Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv")
rm -rg /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
rm -rg "/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv"
library(shiny)
setwd("~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 2/Module 2 Assignment")
shiny::runApp('~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 2/Module2_willsTestDashboard')
runApp('~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 2/Module2_willsTestDashboard')
runApp('~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 2/Module2_willsTestDashboard')
runApp('~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 2/Module2_willsTestDashboard')
?faithful
runApp('~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 2/Module2_willsTestDashboard')
setwd("~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 2/Module2_willsTestDashboard")
# Read in Jan 17 Items CSV file into data frame j17i
j17i <- read.csv("jan17Items.csv")
runApp()
runApp()
runApp()
log(x = 100, base = 10)
log(100,10)
?sum # In the help, there are two arguments: ..., and na.rm. The ellipsis ... means that the number of arguments can vary
sum(1,3,5)
# Creating functions----
# Let's create a function that uses the built-in cars dataset
?cars
cars
# Creating functions----
# Let's create a function that uses the built-in cars dataset
read(cars)
summary(cars)
summary(dataframe)
summarizeAndPlot <- function(dataframe = cars, column = 'speed'){
summary(dataframe)
paste0('The value in row 1, column 1 is: ', dataframe[1,1])
paste0('The value in row 2, column 2 is: ', dataframe[2,2])
hist(dataframe[,column])
}
View(summarizeAndPlot)
summarizeAndPlot() # Notice that it prints the histogram, but not the summary stats or other lines of text. It will only print text if it comes last.
summarizeAndPlot <- function(dataframe = cars, column = 'speed'){
print(summary(dataframe))
print(paste0('The value in row 1, column 1 is: ', dataframe[1,1]))
print(paste0('The value in row 2, column 2 is: ', dataframe[2,2]))
hist(dataframe[,column])
}
summarizeAndPlot() # This now prints the summary statistics and the other two lines of text.
View(summarizeAndPlot)
setwd("~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 3/Module 3 - R files and dataset")
# Let's test it out on another dataset
j17i <- read.csv('jan17Items.csv', sep = ',') # Read in the jan17Items.csv dataset
source('~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 3/Module 3 - R files and dataset/M3_04 More on Functions.R', echo=TRUE)
summarizeAndPlot(j17i, 'TotalDue') # It works well!
summarizeAndPlot(j17i, 'NetTotal') # It works well!
summarizeAndPlot(j17i, 'Price') # It works well!
# Saving results----
# Modify the function to return the summary statistics.
# You can save whatever is returned from a function into an object
a <- summarizeAndPlot(j17i, 'Tax') # This runs the function and saves the returned values to the variable, a
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
summarizeAndPlot(j17i, 'Price') # It works well!
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
# Saving results----
# Modify the function to return the summary statistics.
# You can save whatever is returned from a function into an object
a <- summarizeAndPlot(j17i, 'Tax') # This runs the function and saves the returned values to the variable, a
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
# Saving results----
# Modify the function to return the summary statistics.
# You can save whatever is returned from a function into an object
a <- summarizeAndPlot(j17i, 'Tax') # This runs the function and saves the returned values to the variable, a
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
a
# Saving results----
# Modify the function to return the summary statistics.
# You can save whatever is returned from a function into an object
a <- summarizeAndPlot(j17i, 'Tax') # This runs the function and saves the returned values to the variable, a
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
# Printing----
# Give instructions to print the summary statistics
summarizeAndPlot <- function(dataframe = cars, column = 'speed'){
print(summary(dataframe))
print(paste0('The value in row 1, column 1 is: ', dataframe[1,1]))
print(paste0('The value in row 2, column 2 is: ', dataframe[2,2]))
return(print(paste0('The value in row 2, column 2 is: ', dataframe[2,2])))
hist(dataframe[,column])
}
# Saving results----
# Modify the function to return the summary statistics.
# You can save whatever is returned from a function into an object
a <- summarizeAndPlot(j17i, 'Subtotal') # This runs the function and saves the returned values to the variable, a
# Saving results----
# Modify the function to return the summary statistics.
# You can save whatever is returned from a function into an object
a <- summarizeAndPlot(j17i, 'Subtotal') # This runs the function and saves the returned values to the variable, a
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
View(j17i)
View(j17i)
a
a <- summarizeAndPlot(j17i, 'Subtotal') # Now run the function and save the returned output to variable a again.
a # You can see that the summary statistics are now the contents of a
# Returning----
# Adjust the function so that it returns the summary statistics
summarizeAndPlot <- function(dataframe = cars, column = 'speed'){
print(summary(dataframe))
return(summary(dataframe)) # This is the line of code that returns the summary statistics
hist(dataframe[,column])
}
a <- summarizeAndPlot(j17i, 'Subtotal') # Now run the function and save the returned output to variable a again.
a # You can see that the summary statistics are now the contents of a
a # You can see that the summary statistics are now the contents of a
# Printing----
# Give instructions to print the summary statistics
summarizeAndPlot <- function(dataframe = cars, column = 'speed'){
print(summary(dataframe))
print(paste0('The value in row 1, column 1 is: ', dataframe[1,1]))
print(paste0('The value in row 2, column 2 is: ', dataframe[2,2]))
return(print(paste0('The value in row 2, column 2 is: ', dataframe[2,2])))
hist(dataframe[,column])
}
# Saving results----
# Modify the function to return the summary statistics.
# You can save whatever is returned from a function into an object
a <- summarizeAndPlot(j17i, 'Tax') # This runs the function and saves the returned values to the variable, a
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
# Returning----
# Adjust the function so that it returns the summary statistics
summarizeAndPlot <- function(dataframe = cars, column = 'speed'){
print(summary(dataframe))
return(summary(dataframe)) # This is the line of code that returns the summary statistics
hist(dataframe[,column])
}
a <- summarizeAndPlot(j17i, 'Subtotal') # Now run the function and save the returned output to variable a again.
a # You can see that the summary statistics are now the contents of a
print(summary(dataframe))
print(paste0('The value in row 1, column 1 is: ', dataframe[1,1]))
# Printing----
# Give instructions to print the summary statistics
summarizeAndPlot <- function(dataframe = cars, column = 'speed'){
print(summary(dataframe))
print(paste0('The value in row 1, column 1 is: ', dataframe[1,1]))
print(paste0('The value in row 2, column 2 is: ', dataframe[2,2]))
return(print(paste0('The value in row 2, column 2 is: ', dataframe[2,2])))
hist(dataframe[,column])
}
# Saving results----
# Modify the function to return the summary statistics.
# You can save whatever is returned from a function into an object
a <- summarizeAndPlot(j17i, 'Tax') # This runs the function and saves the returned values to the variable, a
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
# Saving results----
# Modify the function to return the summary statistics.
# You can save whatever is returned from a function into an object
a <- summarizeAndPlot(j17i, 'Tax') # This runs the function and saves the returned values to the variable, a
summarizeAndPlot(j17i, 'Tax') # It works well!
a# This returns the contents of the variable a to the console. Notice that it creates a list that has elements needed for the histogram, but not the summary statistics.
install.packages("lubridate")
library(lubridate)
install.packages("datetime")
library(datetime)
detach("package:lubridate", unload = TRUE)
library(lubridate)
library(dplyr)
library(plyr)
install.packages("plyr")
library(dplyr)
library(plyr)
install.packages("dplyr")
dplyr::arrange
# Read in data----
# If you haven't already done so, begin by reading in the jan17Items.csv and
# the jan17Weather.csv files.
df <- read.csv('jan17Items.csv'
, sep = ','
, stringsAsFactors = F
)
dfw <- read.csv('jan17Weather.csv'
, sep = '\t'
, stringsAsFactors = F
)
dfw <- read.csv('jan17Weather.csv'
, sep = '\t'
, stringsAsFactors = F
)
View(j17i)
str(df)
summary(df)
mean(df$CashierName)        # An error is triggerd because CashierName is a character vector.
dfw2 <- read.csv('jan17Weather.csv'
, sep = '\t'
, stringsAsFactors = T
)
# Read in data----
# If you haven't already done so, begin by reading in the jan17Items.csv and
# the jan17Weather.csv files.
df <- read.csv('jan17Items.csv'
, sep = ','
, stringsAsFactors = F
)
dfw <- read.csv('jan17Weather.csv'
, sep = '\t'
, stringsAsFactors = F
)
x <- 'fox'                  # A character vector of length 1
y <- c('fox', 'hound')      # A character vector of length 2
mean(df$CashierName)        # An error is triggerd because CashierName is a character vector.
dfw2 <- read.csv('jan17Weather.csv'
, sep = '\t'
, stringsAsFactors = T
)
str(dfw2)       # Notice that the date column is a Factor type with 31 levels, one for each day of the month
dfw <- read.csv('jan17Weather.csv'
, sep = ','
, stringsAsFactors = F
)
dfw <- read.csv('jan17Weather.csv'
, sep = '\tab'
, stringsAsFactors = F
)
dfw <- read.csv('jan17Weather.csv'
, sep = '\tab'
, stringsAsFactors = F
)
dfw <- read.csv('jan17Weather.csv'
, sep = '/tab'
, stringsAsFactors = F
)
dfw <- read.csv('jan17Weather.csv'
, sep = '\tab'
, stringsAsFactors = F
)
dfw <- read.csv('jan17Weather.csv'
, sep = '\t'
, stringsAsFactors = F
)
str(df)
class(x)
class(df$time)
class(df$Time)
mean(df$Price)        # An error is triggerd because CashierName is a character vector.
class(df$Price)
mean(df$CashierName)        # An error is triggerd because CashierName is a character vector.
# Factors: Recall how when we read in the data, we manually set the parameter,
# StringsAsFactors = FALSE? That's because R is built for statistics. All of the
# machine learning algorithms operate based on numeric data. So, character strings
# have to be converted to some type of numeric data. R assumes that you want to
# make that conversion from the beginning, which is typically not a good assumption,
# so it converts them to factors. Factors are basically qualitative values with
# a certain number of levels. Try reading in the weather data and set the
# stringsAsFactors parameter equal to TRUE. Then look at the structure of the
# dataframe, focusing on the date column.
dfw$date
class(dfw$date)
# Read in data----
# If you haven't already done so, begin by reading in the jan17Items.csv and
# the jan17Weather.csv files.
df <- read.csv('jan17Items.csv'
, sep = ','
, stringsAsFactors = T
)
str(df)
# Read in data----
# If you haven't already done so, begin by reading in the jan17Items.csv and
# the jan17Weather.csv files.
df <- read.csv('jan17Items.csv'
, sep = ','
, stringsAsFactors = F
)
str(df)
a = 5         # A numeric vector of length 1
b = '5'       # A character vector of length 1
clas(b)
class(b)
as.numeric(b)
class(b)
b = '5'       # A character vector of length 1
as.numeric(b)
class(b)
b <- as.numeric(b)
class(b)
# Some coercion occurs automatically. Consider the following example of creating
# a numeric vector that includes a string.
v1 <- c(1,3,5)              # Automatically stored as a numeric vector
v2 <- c(1,3,'5')            #  One string signals R to coerce all values to strings.
# You can coerce a vector of strings to numeric values using the as.numeric function.
v3 <- as.numeric(v2)        # If a string is clearly a numeric character, it's coerced to a numeric value.
v4 <- as.integer(v2)        # Can also coerce to integer vector
v5 <- c(1,3,'five')         # Character vector
v6 <- as.numeric(v5)        # Notice that five was converted to NA
# NaN means that a number does not exist, such as 0/0
v7 <- c(1, 7/3, 0/0)      # Notice that 0/0 is converted to NaN
v7
# You can manually enter NA and NaN
v8 <- c(1, 7/3, NaN, NA)  # Notice how special words are blue.
v8
summary(df$Price)           # Notice that 200 values are NA's
mean(df$Price)              # R's default is often to try and include NA and NaN in calculations, resulting in errors.
?mean
mean(df$Price, na.rm = T)   # Explicitly tell R to remove NA and NaNs from calculations.
min(df$Price, na.rm = T)
date1Words <- 'April 3, 2005'              # Character string format
date1Short <- '04/03/05'                   # Character string format
date1Numeric <- 040305
# You can use the as.Date function to convert to a date format
# Be sure and read the documentation about strptime to keep track of the symbols
# used with the format argument.
?as.Date
d1w <- as.Date(date1Words, format = '%B %d, %Y')         # This works
d1s <- as.Date(date1Short, format = '%m/%d/%y')          # This works
d1n <- as.Date(date1Numeric, format = '%m%d%y')          # This does not work. It's trying to calculate 40,305 days since an epic
d1n <- as.Date(date1Numeric, origin = '1970-01-01')      # This converts it to a date format, but the wrong date: 2080-05-08
d1n <- as.Date(date1Numeric, format = '%m%d%y')          # This does not work. It's trying to calculate 40,305 days since an epic
d1n <- as.Date(date1Numeric, format = '%m%d%y')          # This does not work. It's trying to calculate 40,305 days since an epic
d1n <- as.Date(date1Numeric, origin = '1970-01-01')
y
reticulate::repl_python()
View(r)
no
# Lubridate package----
# The lubridate package makes it easier to convert date and time character
# strings to date and time types.
install.packages('lubridate')              # Install the package if you haven't already done so in your project.
library(lubridate)                         # Load the functions in the package
d1w <- mdy(date1Words)                     # This works
d1s <- mdy(date1Short)                     # This works
d1n <- mdy(date1Numeric)                   # This works, too!
ymd('2005-04-03')                          # Alternative ordering is easy to remember
?lubridate
