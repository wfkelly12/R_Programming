5 + 5
5/10
4+5
(1+5) / (26*45)
clear
cls
5/1
log(10, 10)
5%%2
x <- 5        # Assign x the value of 5
y <- 8        # Assign y the value of 8
x*y           # x multiplied by y will return the same thing as 5 multiplied by 8
z <- x*y      # assign z the result of x multiplied by y
rm(z)         # Removes a variable from memory
rm(x,y)
log(10)
2*4
source('~/.active-rstudio-document')
2+4
2-4
2*4
2+4
2-4
2*4
2^4
x = 4
4*x
x <- 4
x <- 5
x <- 5
2+4
2-4
2*4
2^4
x = 4
4*x
x <- 5
y <- 6
z <- x*y
rm(x)
rm(y,z)
v1 <- c(1,2,3)
v1
length(v1)
max(v1)
min(v1)
length(v1)
length(v1)
v1*4
v1
v2=v1*4
v2
v1
v3=v2/v1
v3=v1/v2
v4 <- c(4,5,6,7)
v4*v1
install.packages("swirl")
library("swirl")
rm(list=ls())
library("swirl")
swirl()
5_+7
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
swirl
swirl()
builtins()
995
?attr
attr(x,"dim") <- c(2,5)
x <- 1:10
attr(x,"dim") <- c(2,5)
x
plot(1:10)
for (x in 1:10){
print(x)
}
for (x in 1:10){
print(x)
}
for (x in 1:10){
print(x+1)
}
for (x in fruits) {
print(x)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
print(x)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
print(x)
}
dice <- c(1,2,3,4,5,6)
for (x in dice){
print(x)
}
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("shiny", "rstudio")
install.packages("shiny")
dir.exists("/Library/Frameworks/R.framework/Versions/3.3/Resources/library/00LOCK-jrosen48-prcr-4f6f783") returns FALSE?
dir.exists("/Library/Frameworks/R.framework/Versions/3.3/Resources/library/00LOCK-jrosen48-prcr-4f6f783") returns FALSE
rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
:$ rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
$ rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
rm /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
dir.exists("/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv")
rm -rf /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
R CMD INSTALL --no-lock <pkg>
install.packages("Rcpp", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages(xxx, INSTALL_opts = c('--no-lock'))
install.packages(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv), INSTALL_opts = c('--no-lock'))
devtools::install_github("rstudio/httpuv")
install.packages("Shiny", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("shiny", dependencies = TRUE, INSTALL_opts = '--no-lock')
unlink("/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv", recursive = TRUE)
install.packages("httpuv")
install.packages("shiny", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages(c("Rcpp", "httpuv", "shiny"))
dir.exists(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv)
dir.exists(Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv)
dir.exists("Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv")
rm -rg /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv
rm -rg "/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-httpuv"
library(shiny)
setwd("~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 4/Module 4 - R files and dataset")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr) # For lots of data wrangling tasks
library(magrittr) # For piping data into functions
library(lubridate) # For dealing with dates
library(stringr) # String functions
library(forcats) #fct infreq functions
library(dplyr) # Data manipulation
df <- read.csv("ities.csv") # Read ities.csv into data frame
df_weather_weekly <- read.csv("max_temp.csv") # Read max_temp.csv into data frame
dim(df) # Display Row/Col of df
dim(df_weather_weekly) # Display Row/Col of df_weather_weekly
str(df) # Display structure of df
str(df_weather_weekly) # Display structure of df_weather_weekly
summary(df) # Display summary of df
summary(df_weather_weekly) # Display summary of df_weather_weekly
colSums(is.na(df)) # Display columns with missing values
# Calculate mean Price of Chicken and Onion Kabob (C_O) and Beef and Squash Kabob (B_S)
# Where Operation Type is Sale in order to fill in missing observations.
C_O_kabob_sale <- df %>%
filter(LineItem=='Chicken and Onion Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
B_S_kabob_sale <- df %>%
filter(LineItem=='Beef and Squash Kabob' & OperationType=='SALE') %>%
summarise(mean(Price, na.rm = T))
# Replace Line Items with Average Price values calculated above and Calc Total Due
df %<>% mutate(
Price = case_when(
is.na(Price) & LineItem=='Chicken and Onion Kabob' ~ C_O_kabob_sale[1,1]
, is.na(Price) & LineItem=='Beef and Squash Kabob' ~ B_S_kabob_sale[1,1]
, T~Price
),
TotalDue = Price*Quantity
)
summary(df)
df_daily <- df %>%
mutate(
Date = mdy(Date)
, Date = round_date(Date, 'day')
) %>%
group_by(Date) %>%
summarise(Quantity = sum(Quantity)
, TotalDue = sum(TotalDue)) %>%
ungroup()
df_weather_daily <- df_weather_weekly %>%
pivot_longer(cols = Monday:Sunday
, names_to = 'day'
, values_to = 'max_temp')
df_weather_daily %<>%     # Convert WeekStarting col to Date to create primary key
mutate(Date = mdy(WeekStarting))
df_weather_daily$day <- as_factor(df_weather_daily$day) %>%
as.numeric()
df_weather_daily$Date <- df_weather_daily$day + df_weather_daily$Date - 1
df_final <- df_daily %>%
inner_join(df_weather_daily, by = 'Date') %>%
arrange(desc(Date))
#Pair Plot of Quantity, TotalDue, and max_temp from df_final
plot(df_final[,c('Quantity', 'TotalDue', 'max_temp')], cex = .1)
?cex
View(df_weather_weekly)
setwd("~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 4/Module 4 Live Session")
knitr::opts_chunk$set(echo = TRUE)
# R data structure files preserve the data format and are more compact
ba <- readRDS('bakedAppleSampleData.rds') # Notice that the data formats are not all character.
ba_Time_most_2 <- ba %>%
filter(Whs == 'Whs-1') %>%
group_by(EventDate) %>%
summarise(UnitsSold = sum(UnitsSold, na.rm = T)) %>%
ungroup() %>%
arrange(desc(UnitsSold))
ba_Time_most_2
View(ba_Time_most_2)
ba_Whs_most <- ba %>%
group_by(Whs) %>%
summarise(UnitsSold = sum(UnitsSold, na.rm = T)) %>%
ungroup() %>%
arrange(desc(UnitsSold))
ba_Whs_most
View(ba_Whs_most)
View(df)
?round_date()
