5 + 5
5/10
4+5
(1+5) / (26*45)
clear
cls
5/1
log(10, 10)
5%%2
x <- 5        # Assign x the value of 5
y <- 8        # Assign y the value of 8
x*y           # x multiplied by y will return the same thing as 5 multiplied by 8
z <- x*y      # assign z the result of x multiplied by y
rm(z)         # Removes a variable from memory
rm(x,y)
log(10)
2*4
source('~/.active-rstudio-document')
2+4
2-4
2*4
2+4
2-4
2*4
2^4
x = 4
4*x
x <- 4
x <- 5
x <- 5
2+4
2-4
2*4
2^4
x = 4
4*x
x <- 5
y <- 6
z <- x*y
rm(x)
rm(y,z)
v1 <- c(1,2,3)
v1
length(v1)
max(v1)
min(v1)
length(v1)
length(v1)
v1*4
v1
v2=v1*4
v2
v1
v3=v2/v1
v3=v1/v2
v4 <- c(4,5,6,7)
v4*v1
install.packages("swirl")
library("swirl")
rm(list=ls())
library("swirl")
swirl()
5_+7
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
swirl
swirl()
builtins()
995
?attr
attr(x,"dim") <- c(2,5)
x <- 1:10
attr(x,"dim") <- c(2,5)
x
plot(1:10)
for (x in 1:10){
print(x)
}
for (x in 1:10){
print(x)
}
for (x in 1:10){
print(x+1)
}
for (x in fruits) {
print(x)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
print(x)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
print(x)
}
dice <- c(1,2,3,4,5,6)
for (x in dice){
print(x)
}
plot(cars)
setwd("~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 2/R Notebooks")
plot(cars)
j17i <- read.csv('jan17Items.csv', stringsAsFactors = T)
summary(j17i)
hist(log(j17i$TotalDue))
setwd("~/Documents/iMBA Classes/MBA 561/Introduction to Business Analytics with R/Module 2/Module 2 Live Session")
knitr::opts_chunk$set(echo = TRUE)
# Read in data
ba <- read.csv('bakedAppleSampleData.csv')
ba[19,11]
ba[,$DoorCount]
ba[,'DoorCount']
ba[order(),'DoorCount']
ba[order(ASCENDING),'DoorCount']
ba[order(+),'DoorCount']
plot(ba[,c('UnitsSold', 'UnitsPurchased', 'DoorCount', 'Whs')], cex = .1)
boxplot(log10(ba$UnitsSold))
head(ba)
ba[desc(),'DoorCount']
ba[sort(decreasing = FALSE,'DoorCount')]
ba[sort(decreasing = TRUE,'DoorCount')]
ba[sort(max(ba),'DoorCount')]
ba[sort(max(),'DoorCount')]
ba[max(),'DoorCount')]
ba[max(),'DoorCount']
ba[max(ba),'DoorCount']
x <- sort(ba, decreasing = FALSE)
sort(ba,decreasing = FALSE)
ba[order(-df$DoorCount),]
ba[,order(-df$DoorCount)]
ba[,order(-$DoorCount)]
ba[order(ba$DoorCount, decreasing = FALSE),]
newdata <- ba[,order(DoorCount)]
newdata <- ba[,order('DoorCount')]
newdata
DoorCount <- ba[order(ba$DoorCount),]
head(DoorCount)
summary(ba)
remove(newdata)
remove(DoorCount)
ba[order(ba$DoorCount),]
knitr::opts_chunk$set(echo = TRUE)
# Read in data
ba <- read.csv('bakedAppleSampleData.csv')
# Print the first six rows
head(ba)
ba[sort(+ba$DoorCount),]
ba[order(ba$DoorCount),9]
ba[sort(ba$DoorCount, decreasing = FALSE)),9]
ba[sort(ba$DoorCount, decreasing = FALSE),9]
ba[sort(ba$DoorCount, decreasing = TRUE),9]
ba[-order(ba$DoorCount),9]
ba[-order(ba$DoorCount),]
ba[order(ba$DoorCount),]
ba[order(ba$DoorCount),9]
ba[-order(ba$DoorCount),9]
ba[arrange(ba$DoorCount),9]
ba[order(ba$DoorCount,decreasing = FALSE),9]
ba[order(ba$DoorCount,decreasing = TRUE),9]
ba[order(ba$DoorCount,decreasing = TRUE),9]
knitr::opts_chunk$set(echo = TRUE)
# Read in data
ba <- read.csv('bakedAppleSampleData.csv')
# Print the first six rows
head(ba)
unique(ba$Whs)
length(unique(ba$Whs)
summary(ba)
length(unique(ba$Whs))
length(ba$DoorCount)
dim(ba)
IQR(ba$LaborCharge)
length(unique(ba$EventDate))
length(unique(ba$EventDate))
IQR(Ba$LaborCharge)
IQR(ba$LaborCharge)
ba[19,11]
ba(mean(ba$Invoice))
summary(ba)
mean(ba$SupplyCharge)
#Calculate Largest to Smallest "DoorCount" Column
```{r}
ba[order(ba$DoorCount,decreasing = TRUE),9]
```
#IQR
```{r}
IQR(ba$LaborCharge)
```
#Unique Values in EventDate Column
```{r}
length(unique(ba$EventDate))
```
#Column with Mean Value of 7.448
mean(ba$SupplyCharge)
mean(ba$SupplyCharge)
knitr::opts_chunk$set(echo = TRUE)
# Read in data
ba <- read.csv('bakedAppleSampleData.csv')
# Print the first six rows
head(ba)
ba[19,11]
ba[order(ba$DoorCount,decreasing = TRUE),9]
IQR(ba$LaborCharge)
length(unique(ba$EventDate))
hist(ba$UnitsSold)
boxplot(ba$UnitsSold)
knitr::opts_chunk$set(echo = FALSE)
boxplot(log10(ba$UnitsSold))
plot(ba[,c('UnitsSold', 'UnitsPurchased', 'DoorCount', 'Whs')], cex = .1)
plot(ba[,c('UnitsSold', 'UnitsPurchased', 'DoorCount', 'Whs','SplitVendors')], cex = .1)
boxplot(ba$UnitsSold)
ba[19,11]
ba[order(ba$DoorCount,decreasing = TRUE),9]
IQR(ba$LaborCharge)
length(unique(ba$EventDate))
mean(ba$SupplyCharge)
hist(ba$UnitsSold)
# Print the first six rows
head(ba)
ba[19,11]
length(unique(ba$EventDate))
boxplot(log10(ba$UnitsSold))
boxplot(Total ~ Div, data = ba)
install.packages("dplyr") # remove "#" if the package is not already installed.
library(dplyr)
df <- read.csv('ities.csv')     # Read "ities.csv" file and assign to data frame variable "df"
remove(ba)
remove(j17i)
x <- nrows(df)   # Description of what the code is doing
x <- numrows(df)   # Description of what the code is doing
x <- nrows(df)   # Description of what the code is doing
x <- nrow(df)   # Description of what the code is doing
y <- ncol(df)
summary(df)      # Description of what the code is doing
str(df)      # Description of what the code is doing
names(df)# code # Description of what the code is doing
summary(df['Price','Quantity','TotalDue',])# code    # Description of what the code is doing
summary(df[c('Price','Quantity','TotalDue'),])# code    # Description of what the code is doing
summary(df[,c('Price','Quantity','TotalDue')])# code    # Description of what the code is doing
summary(df[,c('Price','Quantity','TotalDue')])# code    # Description of what the code is doing
boxplot(log10(df$Price))    # Displays box plot of Price
boxplot(log10(df$Price))    # Displays box plot of Price
boxplot(log10(df$Quantity))
boxplot(log10(df$TotalDue))
# code # Description of what the code is doing
df_observation <- df[,1]
length(df_observation)
ba[sort(ba$DoorCount),9]
# Read in data
ba <- read.csv('bakedAppleSampleData.csv')
ba[sort(ba$DoorCount),9]
ba[sort(ba$DoorCount,decreasing = TRUE),9]
ba[tail(ba$DoorCount),9]
ba[order(ba$DoorCount,decreasing = TRUE),9]
ba[tail(ba$DoorCount),9]
summary(ba)
ba[order(ba$DoorCount,decreasing = TRUE),9]
IQR(ba$LaborCharge)
boxplot(ba$UnitsSold)
boxplot(Total ~ Div, data = ba)
plot(ba[,c('UnitsSold', 'UnitsPurchased', 'DoorCount', 'Whs','SplitVendors')], cex = .1)
ba[order(ba$DoorCount,decreasing = TRUE),9]
IQR(ba$LaborCharge)
knitr::opts_chunk$set(echo = FALSE)
# Read in data
ba <- read.csv('bakedAppleSampleData.csv')
# Print the first six rows
head(ba)
ba[19,11]
```{r}{r, echo = FALSE}
numericInput("n","How many cars?", 5)
renderTable({ head(cars, input$n)})
```
